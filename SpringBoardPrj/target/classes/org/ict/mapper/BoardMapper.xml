<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 위의 스키마 작성 후, 어떤 인터페이스의 메서드를 쿼리문과 연결해 줄지 아래와 같이 인터페이스 파일부터 mapper 태그로 
	연결합니다 -->
<mapper namespace="org.ict.mapper.BoardMapper">

	<!-- 위의 BoardMapper 인터페이스의 getList 메서드를 호출시 실제로 실행할 쿼리문을 아래와 같이 연결해줍니다 mybatis는 
		단일자료와 리스트자료를 구분하지 않기 떄문에 resultType에는 List<> 자료형도 아래와 같이 단일 VO만 적어주면 됩니다 -->

	<select id="getList" resultType="org.ict.domain.BoardVO">
		<!-- < or > 과 같이 태그로 오인될 수 있는 문자를 포함하는 쿼리문은 그냥 작성하지 않고, CDATA를 이용합니다 아래와 
			같이 <![CDATA[ 실행문 ] ]> 과 같이 실행문을 CDATA 내부에 작성하면 내부의 부등호는 전부 문자로 간주됩니다 쿼리문에서 
			like절을 사용하는 경우 #{변수명} 대신 '%'||#{변수명}||'%' 를 사용합니다(oracle) CONCAT('%', #{변수명}, 
			'%') (MySQL) -->
		<![CDATA[
		SELECT * FROM board_tbl WHERE title LIKE '%'||#{Keyword}||'%' ORDER BY bno DESC
		]]>
	</select>

	<!-- 현재 insert는 BoardVO를 파라미터로 받고 있습니다 이 경우, VO 내부 변수를 #{변수명} 으로 쿼리문에 전달할 
		수 있습니다 ${변수명} 이 아님에 주의 -->
	<insert id="insert">
		INSERT INTO board_tbl (bno, title, content,
		writer)
		VALUES (board_num.nextval, #{title}, #{content}, #{writer})
	</insert>

	<!-- 위의 insert 메서드는 쿼리문을 한번만 실행해도 데이터가 입력되지만 단점이라면 bno에 들어갈 값을 미리 확인할 수 
		없습니다 bno에 들어갈 값을 확인할 수 있도록 insert 실행 이전에 bno값을 외부에서 조회할 수 있도록 변수화 시키는 작업이 
		필요합니다 그 작업을 할때 사용하는 태그가 바로 selectKey 태그입니다 -->
	<insert id="insertSelectKey">
		<!-- 실헹 이전에 bno값을 먼저 조회해서 bno 변수명으로 저장 -->
		<selectKey keyProperty="bno" order="BEFORE"
			resultType="long">
			SELECT board_num.nextval FROM DUAL
		</selectKey>
		INSERT INTO board_tbl (bno, title, content, writer)
		VALUES (#{bno},
		#{title}, #{content}, #{writer})
	</insert>

	<!-- select 메서드 연결 resultType은 리스트랑 개별자료형을 구분하지 않기 떄문에 BoardVO로 처리 -->
	<select id="select" resultType="org.ict.domain.BoardVO">
		SELECT * FROM board_tbl WHERE bno
		= #{bno}
	</select>

	<delete id="delete">
		DELETE FROM board_tbl WHERE bno = #{bno}
	</delete>

	<update id="update">
		UPDATE board_tbl
		SET title = #{title}, content =
		#{content}, writer = #{writer},
		updatedate = sysdate
		WHERE bno = #{bno}
	</update>
	
	<sql id="search">
		<!-- 여기부터 조건별 쿼리가 들어감 먼저 전달받은 searchTupe이 null이 아닌 경우만 다시 어떤 키워드가 들어오는지 확인해서 
			맞는 조건문을 공통쿼리와 limit부분 사이에 붙여줍니다 -->
		<if test="searchType != null">
			<if test="searchType == 't'.toString()">
				(TITLE like '%'||#{keyword}||'%') AND
			</if>
			<if test="searchType == 'c'.toString()">
				(CONTENT like '%'||#{keyword}||'%') AND
			</if>
			<if test="searchType == 'w'.toString()">
				(WRITER like '%'||#{keyword}||'%') AND
			</if>
			<if test="searchType == 'tc'.toString()">
				((TITLE like '%'||#{keyword}||'%') OR (CONTENT like '%'||#{keyword}||'%')) AND
			</if>
			<if test="searchType == 'cw'.toString()">
				((WRITER like '%'||#{keyword}||'%') OR (CONTENT like '%'||#{keyword}||'%')) AND
			</if>
			<if test="searchType == 'tw'.toString()">
				((TITLE like '%'||#{keyword}||'%') OR (WRITER like '%'||#{keyword}||'%')) AND
			</if>
			<if test="searchType == 'tcw'.toString()">
				((TITLE like '%'||#{keyword}||'%') OR (CONTENT like '%'||#{keyword}||'%') OR (WRITER like '%'||#{keyword}||'%')) AND
			</if>
		</if>
		
	</sql>

	<!-- getListPaging -->
	<select id="getListPaging" resultType="org.ict.domain.BoardVO">
		<!-- *로 조회하면 rn까지 포함하므로 깜끔하게 rn 없이 조회 하도록 조회 컬럼을 다시 작성합니다 -->
		<![CDATA[
		SELECT bno, title, content, writer, regdate, updatedate FROM
		(SELECT /*+ INDEX_DESC(board_tbl pk_board) */
		ROWNUM rn, board_tbl.* FROM board_tbl 
		WHERE 
		]]>
		<!-- sql 태그에 저장된 조건절 -->
		<include refid="search"/>
		<!-- 아래부터는 MySql의 Lomit과 같은 역할을 함 -->
		<![CDATA[
		ROWNUM <= #{pageNum} * #{amount}) tbl
		WHERE rn > (#{pageNum}-1) * #{amount}	
		]]>
	</select>

	<select id="boardCount" resultType="int">
		SELECT COUNT(*) FROM board_tbl WHERE
		<!-- sql 태그에 저장된 조건절 넣기
		기존 코드는 검색조건에 무관하게 전체 DB글만 가져왔으므로
		검색 조건에 따른 총 글 개수를 조건에 맞게 출력하도록 수정 
		검색조건은 searchType 변수를 전달받아야 하므로
		컨트롤러, 서비스, 매퍼쪽에도 searchType을 받을수 있게
		boardCount 호출 관련 메서드에 SearchCriteria를 전달합니다-->
		<include refid="search"/>
		bno > 0
	</select>
</mapper>